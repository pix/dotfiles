## README.md for Chezmoi Repository

Welcome to my Chezmoi repo!

### Managed Files
This repository cleverly organizes files into various categories, adapting to your needs:

**Security Tools and Configurations:**
- Conditional deployment of pentesting tools like [Burp](dot_bin/executable_burp), [SecLists](.chezmoiexternals/pwning.yaml.tmpl) based on config flags.
- Dynamic font management and GUI elements depending on the chosen OS and user preferences, managing files like [fonts](.chezmoiexternals/fonts.yaml.tmpl) and [font configurations](dot_config/fontconfig).

**Ephemeral Configurations:**
- Minimal configurations, ideal for testing environments, including conditional management of [shells and tools](dot_config/shells).

### Dynamic Data Handling with Templates

There's a way to allow templates to be used in [`.chezmoidata`](.chezmoidata) in a way.
By placing templates under [`.chezmoitemplates/data/`](.chezmoitemplates/data/) and merging them into [`.chezmoi.yaml.tmpl`](.chezmoi.yaml.tmpl) , the system allows for dynamic configuration management. This method was indirectly inspired by a community request for enhanced templating capabilities in Chezmoi, specifically for the [`.chezmoidata`](.chezmoidata) file to support templates. Though the request was not implemented directly into Chezmoi, this setup provides a flexible workaround.

To replicate this in your own repository, simply add your templated configurations under the [`.chezmoitemplates/data/`](.chezmoitemplates/data/) directory and ensure they are properly referenced in your main [`.chezmoi.yaml.tmpl`](.chezmoi.yaml.tmpl). This method enhances the dynamic generation of configurations, making your system management both efficient and scalable.

For a detailed exploration of the feature request that inspired this workaround, check out [GitHub issue #1663](https://github.com/twpayne/chezmoi/issues/1663).

Happy configuring!

<!-- begin dotfiles-doc --markdown -->
{{ output "dotfiles-doc" "--markdown" }}