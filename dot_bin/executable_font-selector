#!/usr/bin/env python3
# doc:command:font-selector:misc:Select a font and preview it in various widgets

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Pango

class FontSelector(Gtk.Window):
    def __init__(self):
        super().__init__(title="Font Selector")
        self.set_border_width(10)
        self.set_default_size(1000, 800)

        self.current_font_size = 10

        vbox_main = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(vbox_main)

        frame = Gtk.Frame(label="Font Selector")
        vbox_main.pack_start(frame, True, True, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        frame.add(hbox)

        # Font list
        self.font_liststore = Gtk.ListStore(str)
        self.populate_font_list()

        self.font_treeview = Gtk.TreeView(model=self.font_liststore)
        self.font_renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn("Font", self.font_renderer, text=0)
        self.font_treeview.append_column(column)
        self.font_treeview.connect("cursor-changed", self.on_font_selected)
        
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_vexpand(True)
        scrolled_window.add(self.font_treeview)
        hbox.pack_start(scrolled_window, True, True, 0)

        # Font preview and details
        vbox_preview = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        vbox_preview.set_vexpand(True)
        vbox_preview.set_hexpand(True)

        # Menu
        menu_bar = Gtk.MenuBar()
        self.file_menu_item = Gtk.MenuItem(label="File")
        self.edit_menu_item = Gtk.MenuItem(label="Edit")
        self.test_menu_item = Gtk.MenuItem(label="Test")
        self.george_menu_item = Gtk.MenuItem(label="George")
        self.abitbol_menu_item = Gtk.MenuItem(label="Abitbol")
        
        menu_bar.append(self.file_menu_item)
        menu_bar.append(self.edit_menu_item)
        menu_bar.append(self.test_menu_item)
        menu_bar.append(self.george_menu_item)
        menu_bar.append(self.abitbol_menu_item)

        vbox_preview.pack_start(menu_bar, False, False, 0)

        self.preview_label = Gtk.Label()
        vbox_preview.pack_start(self.preview_label, True, True, 0)

        self.combined_textview = Gtk.TextView()
        self.combined_textview.set_editable(False)
        self.combined_textview.set_wrap_mode(Gtk.WrapMode.WORD)
        self.combined_textview.set_cursor_visible(False)
        self.combined_textview.set_size_request(-1, 60)
        scrolled_combined_text = Gtk.ScrolledWindow()
        scrolled_combined_text.set_vexpand(False)
        scrolled_combined_text.set_hexpand(True)
        scrolled_combined_text.add(self.combined_textview)
        vbox_preview.pack_start(scrolled_combined_text, False, False, 0)

        self.sample_button = Gtk.Button(label="Sample Button")
        vbox_preview.pack_start(self.sample_button, False, False, 0)

        self.sample_entry = Gtk.Entry(text="Sample Entry")
        vbox_preview.pack_start(self.sample_entry, False, False, 0)

        self.radio_button1 = Gtk.RadioButton(label="Option 1")
        vbox_preview.pack_start(self.radio_button1, False, False, 0)

        self.radio_button2 = Gtk.RadioButton(label="Option 2", group=self.radio_button1)
        vbox_preview.pack_start(self.radio_button2, False, False, 0)

        self.check_button = Gtk.CheckButton(label="Check Button")
        vbox_preview.pack_start(self.check_button, False, False, 0)

        self.text_area = Gtk.TextView()
        self.text_area.get_buffer().set_text("Sample code\nLine 2\nLine 3")
        scrolled_text = Gtk.ScrolledWindow()
        scrolled_text.set_vexpand(True)
        scrolled_text.set_hexpand(True)
        scrolled_text.add(self.text_area)
        vbox_preview.pack_start(scrolled_text, True, True, 0)

        self.font_size_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        self.font_size_label = Gtk.Label(label="Font Size:")
        self.font_size_box.pack_start(self.font_size_label, False, False, 0)

        self.decrease_button = Gtk.Button(label="-")
        self.decrease_button.connect("clicked", self.on_decrease_font_size)
        self.font_size_box.pack_start(self.decrease_button, False, False, 0)

        self.increase_button = Gtk.Button(label="+")
        self.increase_button.connect("clicked", self.on_increase_font_size)
        self.font_size_box.pack_start(self.increase_button, False, False, 0)

        vbox_preview.pack_start(self.font_size_box, False, False, 0)

        hbox.pack_start(vbox_preview, True, True, 0)

    def populate_font_list(self):
        context = self.get_pango_context()
        font_map = context.get_font_map()
        families = font_map.list_families()

        # Sort the font families by name
        family_names = sorted([family.get_name() for family in families])

        for family_name in family_names:
            self.font_liststore.append([family_name])

    def on_font_selected(self, treeview):
        selection = treeview.get_selection()
        model, treeiter = selection.get_selected()

        if treeiter is not None:
            font_name = model[treeiter][0]
            self.update_font_preview(font_name)

    def on_decrease_font_size(self, button):
        if self.current_font_size > 1:
            self.current_font_size -= 1
            self.update_font_preview()

    def on_increase_font_size(self, button):
        self.current_font_size += 1
        self.update_font_preview()

    def update_font_preview(self, font_name=None):
        if not font_name:
            selection = self.font_treeview.get_selection()
            model, treeiter = selection.get_selected()
            if treeiter is not None:
                font_name = model[treeiter][0]
            else:
                return

        font_desc = Pango.FontDescription(f"{font_name} {self.current_font_size}")
        
        # Update all preview widgets with the new font
        self.preview_label.set_text(f"The quick brown fox jumps over the lazy dog\nFont: {font_name} {self.current_font_size}")
        self.preview_label.modify_font(font_desc)
        self.sample_button.modify_font(font_desc)
        self.sample_entry.modify_font(font_desc)
        self.text_area.modify_font(font_desc)
        self.file_menu_item.modify_font(font_desc)
        self.edit_menu_item.modify_font(font_desc)
        self.test_menu_item.modify_font(font_desc)
        self.george_menu_item.modify_font(font_desc)
        self.abitbol_menu_item.modify_font(font_desc)
        self.font_renderer.set_property("font-desc", font_desc)

        combined_text = (
            f"CSS: font-family: '{font_name}'; font-size: {self.current_font_size}px;\n"
            f"gtk_font: \"{font_name} {self.current_font_size}\"\n"
            f"qt_font_fixed: \"{font_name},{self.current_font_size},-1,5,50,0,0,0,0,0\"\n"
            f"qt_font_general: \"{font_name},{self.current_font_size},-1,5,50,0,0,0,0,0\""
        )
        buffer = self.combined_textview.get_buffer()
        buffer.set_text(combined_text)

win = FontSelector()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()

