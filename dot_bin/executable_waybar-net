#!/usr/bin/env python3

import socket
import requests
import json
import argparse

# Function to force IPv4 or IPv6 requests
def set_allowed_gai_family(family):
    def allowed_gai_family():
        return family
    requests.packages.urllib3.util.connection.allowed_gai_family = allowed_gai_family

# Function to get geo information for a specific address family
def get_geo_info(family):
    set_allowed_gai_family(family)
    try:
        response = requests.get("https://get.geojs.io/v1/ip/geo.json", timeout=5)
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException:
        return None

# Get geo information for IPv4 and IPv6
geo_info_v4 = get_geo_info(socket.AF_INET)
geo_info_v6 = get_geo_info(socket.AF_INET6)

# Extract IP addresses and location information
ipv4_address = geo_info_v4.get("ip") if geo_info_v4 else None
ipv6_address = geo_info_v6.get("ip") if geo_info_v6 else None

def format_location_info(geo_info):
    city = geo_info.get("city", None)
    region = geo_info.get("region", None)
    country = geo_info.get("country", None)
    organization = geo_info.get("organization", None)
    accuracy = geo_info.get("accuracy", None)

    out = ""
    if city:
        out += f"{city}, "
    if region:
        out += f"{region}, "
    if country:
        out += f"{country}"
    
    if len(out) > 0:
        if accuracy:
            out += f" (¬±{accuracy} km)"
        out = f"<b>Location:</b> {out}\n"
    
    if organization:
        out += f"<b>Network:</b> {organization}"

    return out

# Determine the connectivity status
if ipv4_address or ipv6_address:
    connectivity_status = "üåê"
else:
    connectivity_status = "‚ùå"

# Prepare the tooltip with pango markup
tooltip_parts = []
if ipv4_address:
    location_info_v4 = format_location_info(geo_info_v4)
    tooltip_parts.append(f"<b>IPv4:</b> {ipv4_address}\n{location_info_v4}")
if ipv6_address:
    location_info_v6 = format_location_info(geo_info_v6)
    tooltip_parts.append(f"<b>IPv6:</b> {ipv6_address}\n{location_info_v6}")
tooltip_str = "\n\n".join(tooltip_parts)

# Prepare the JSON output
output_json = {
    "text": connectivity_status,
    "tooltip": tooltip_str,
    "class": ""
}

# Argument parsing
parser = argparse.ArgumentParser(description='Show external IP addresses and connectivity status.')
parser.add_argument('--ipv4', action='store_true', help='Show IPv4 address in raw form')
parser.add_argument('--ipv6', action='store_true', help='Show IPv6 address in raw form')
parser.add_argument('--text', action='store_true', help='Show output in plain text format')
parser.add_argument('--json', action='store_true', help='Show output in JSON format (default)')

args = parser.parse_args()

# Output based on arguments
if args.ipv4:
    print(ipv4_address if ipv4_address else "No IPv4 address found")
elif args.ipv6:
    print(ipv6_address if ipv6_address else "No IPv6 address found")
elif args.text:
    out = output_json["tooltip"].replace("<b>", "").replace("</b>", "")
    print(out)
else:
    print(json.dumps(output_json))

